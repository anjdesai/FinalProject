'''
If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.

Find the sum of all the multiples of 3 or 5 below 1000.
'''
#sets the sum to 0
finalsum = 0
#sets the range 
for x in range(1000):
    #this will find the multiples of 3 and 5 in the range 
    if (x%3 == 0 or x%5 == 0):
        #this adds it to the final sum 
        finalsum = finalsum+x
print (finalsum)

'''
Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
'''

firstnumber = 1
secondnumber = 1
sum = 0
#setting 4,000,000 as max 
while secondnumber < 4000000:
    #to find only even value numbers 
    if secondnumber % 2 ==0:
        sum += secondnumber
    firstnumber,secondnumber = secondnumber,firstnumber+secondnumber
print(sum)

'''
The prime factors of 13195 are 5, 7, 13 and 29.

What is the largest prime factor of the number 600851475143 ?
'''

#This function will find the maximum prime factor.
def largestprimefactor(number):
    factor = 2
    while factor * factor <= number:
        while number % factor == 0:
            number /= factor
        factor += 1
    if (number > 1):
        return number
    return factor
#This will print the largest prime factor for the number 600851475143
#This can be changed to accomodate for any number 
print largestprimefactor(600851475143)

'''
A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 Ã— 99.
Find the largest palindrome made from the product of two 3-digit numbers.
'''

Largest3Palindrome = 0
    #This makes sure that the palindrome is only made from two 3-digit numbers
for x in range (100,999):
    for y in range (100, 999):
        palindrome = x * y
        if str(palindrome) == str(palindrome)[::-1]:
            if palindrome > Largest3Palindrome:
                Largest3Palindrome = palindrome
print(Largest3Palindrome)


'''
2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.

What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?
'''
#this helper function will see if numbers 1-20
def divisible(num):
    #goes through number 1-20
    for x in range(1,20):
        if num % x == 0:
            #the break function will move on to the next number 
            pass
        else:
            return False 
    return True 
#starts at number 1 then goes through the numbers in the range (1-20)
startnum = 1
while divisible(startnum) == False:
    startnum += 1
print(startnum) 


'''
The sum of the squares of the first ten natural numbers is 1^2 + 2^2 + ... + 10^2 =385

The square of the sum of the first ten natural numbers is (1 + 2 + ... + 10)^2 = 55^2 = 3025

Hence the difference between the sum of the squares of the first 
ten natural numbers and the square of the sum is 3025 - 385 = 2640

Find the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum.
    
'''
#I acknowledge Joey Silva for helping me understand the function of "nums.extend" 

#creates a list with numbers 1 to 100
nums = []
nums.extend(range(1,101))
#this squares the numbers in the list above
squarednums = [number ** 2 for number in nums]
squaredsum = sum(squarednums)
sumsquared = sum(nums) **2
#find the difference between the two values 
finalnum = sumsquared - squaredsum
print(finalnum)

